#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore, expressSession } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const cookieParser = require("cookie-parser");
const clientSocketInfo = require("../clientSocketInfo");
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

const wrap = (middleware) => (socket, next) =>
  middleware(socket.request, {}, next);

io.use(wrap(expressSession));

io.on("connection", (socket) => {
  console.log("socket server connected");

  io.emit("socketId-collect");

  socket.on("update-socketId", ({ userId, socketId }) => {
    if (userId && socketId)
      clientSocketInfo.set(userId, {
        userId,
        socketId,
      });
  });

  // add socket to clientSocketInfo
  socket.on("go-online", ({ id, socketId }) => {
    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }

    if (!clientSocketInfo.has(id) && socketId) {
      clientSocketInfo.set(id, {
        userId: id,
        socketId,
      });
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("new-message", (data) => {
    if (clientSocketInfo.has(data.recipientId)) {
      io.to(clientSocketInfo.get(data.recipientId).socketId).emit(
        "new-message",
        {
          message: data.message,
          sender: data.sender,
          recipientId: data.recipientId,
        }
      );
    }
  });

  socket.on("read-message", (data) => {
    if (clientSocketInfo.has(data.recipientId)) {
      io.to(clientSocketInfo.get(data.senderId).socketId).emit(
        "read-message",
        data
      );
    }
  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });

  socket.on("is-typing", (data) => {
    if (clientSocketInfo.has(data.recipientId)) {
      io.to(clientSocketInfo.get(data.recipientId).socketId).emit(
        "is-typing",
        data
      );
    }
  });
  socket.on("disconnect", () => {
    console.log(`Socket ${socket.id} disconnected.`);
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
